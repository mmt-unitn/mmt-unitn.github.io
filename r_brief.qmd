---
title: "R minimo"
author: "Paolo Bosetti"
date: "`r Sys.Date()`"
format: 
  html:
    toc: TRUE
engine: knitr
webr:
  cell-options:
    autorun: true
    editor-font-scale: 0.9
  packages: ['tidyverse']
filters:
  - webr
---

# Basi del linguaggio

:::{.callout-note}
I blocchi di codice di seguito sono live: è possibile modificarli, eseguirli e osservare il risultato!
:::

## Variabili

L'assegnazione di variabili avviene con il simbolo `<-`, il quale funziona anche in direzione opposta (`->`):

```{webr-r}
a <- 10
20 -> b
```

## Vettori

I vettori si creano con la funzione `c()` (come **combine**):

```{webr-r}
v <- c(1, 2, 3, 4, 5)
```

Le sequenze regolari con passo 1 si creano con l'operatore `:`:

```{webr-r}
v.up <- 1:5
v.down <- 5:1
```

Si noti che il punto per R è un carattere qualsiasi, quindi può fare parte di nomi di variabili.

Le sequenze con passo diverso da 1 si ottengono con `seq()`:

```{webr-r}
v <- seq(1, 10, 0.1)
```

Se si vuole specificare il numero di elementi invece che il passo:

```{webr-r}
v <- seq(1, 10, length.out = 7)
v
```


## Matrici

Una matrice si crea con la funzione `matrix()`. Di default i valori vengono passati **per colonne**:

```{webr-r}
m <- matrix(1:12, nrow = 3)
m
```
Si noti che le opzioni delle funzioni possono essere passate per posizione o per nome. Se si usa il nome, possono essere passate in qualsiasi posizione.

```{webr-r}
m <- matrix(byrow=TRUE, 1:12, nrow = 3)
m
```


## Indicizzazione

Matrici e vettori in R hanno **base 1**, cioè il primo elemento ha indice 1 (anziché 0 come in C/C++ e Python).

Per **indicizzare** un vettore si usano le parentesi quadrate:

```{webr-r}
v.up[2]
```

Per una matrice si passano due argomenti tra le parentesi quadrate, omettendo uno o entrambi se si vile estrarre un'intera colonna o intera riga. Il primo argomento è quello di riga:

```{webr-r}
m[3,2]
m[2,]
```

È possibile estrarre sottoinsiemi di elementi passando alle parentesi quadrate **vettori di indici**:

```{webr-r}
v.down[c(4,2)]
```

Infine, è possibile usare vettori di valori logici (`TRUE` o `FALSE`, abbreviabili in `T` e `F`). In questo caso, se il vettore di indici è più breve del vettore/matrice originale, si assume ripetuto:

```{webr-r}
# Vettore di indici lungo come v.up
v.up[v.up > 2]
# Vettore di indici più corto di v.up
v.up[c(T,F)]
```


## Funzioni vettorializzate

In R ogni variabile è intrinsecamente un vettore e tutte (o quasi) le funzioni e operatori base sono **vettorializzate**, cioè operano elemento per elemento. Ciò spiega perché l'espressione `v.up[v.up > 2]` funziona: `v.up > 2` restituisce un vettore di valori logici lungo come `v.up`, valutando la diseguaglianza per ogni elemento di `v.up`.

```{webr-r}
v.up * 2
```

Ma anche:

```{webr-r}
v.up + v.down
```

Ciò fa sì che sia **raramente necessario utilizzare dei loop**.

## Cicli e loop

Quando proprio è necessario:

```{webr-r}
s <- 0
for (e in v.up) {
  s <- s + e
}
s
```

anche se bastava (ed è molto più efficiente):

```{webr-r}
sum(v.up)
```

# Funzioni

R è un **linguaggio funzionale**, cioè le funzioni sono *first class objects*, ossia tipi come gli altri e possono essere utilizzate anonime o assegnate a variabili:

```{webr-r}
mult <- function(x, factor = 2) x * factor

mult(10)
```

Si noti che è possibile assegnare un *default* ad alcuni argomenti.

Alcune funzioni (vedremo più avanti) accettano **funzioni come argomenti**. In tal caso è frequente usare l'abbreviazione (con `\` al posto di `function`):

```{webr-r}
mult <- \(x, factor = 1) x * factor
```



# Strutture dati

Le principali strutture dati sono le **liste** e le **tabelle**:

* **liste**: sono contenitori eterogenei, che possono cioè raggruppare valori di qualsiasi tipo. Possono essere **anonime**, nel qual caso gli elementi sono accessibili per posizione, oppure **nominate**, nel qual caso ogni elemento ha un nome univoco;
* **tabelle**: sono matrici in cui le colonne hanno nomi. A differenza delle matrici, che sono sempre **omogenee**, le tabelle possono avere colonne di tipi diversi, ma ogni colonna deve essere internamente omogenea.

## Liste

Le liste si creano con la funzione `list()`:

```{webr-r}
l.anon <- list(2, "sette", 1:5)
l.anon
```

```{webr-r}
l.named <- list(
  A = 1,
  B = "cinque",
  C = c(3,1,12.7),
  ultimo = NA
)
l.named
```

Si noti che `NA` significa **not available** e rappresenta un elemento mancante.

Per accedere agli elementi di una lista si usano sempre le parentesi quadrate:

```{webr-r}
l.anon[2]
l.named["B"]
```

Si noti però che usando `[]` si ottiene di nuovo una lista (una *sotto-lista*). Per ottenere l'elemento contenuto in una data posizione è necessario usare la doppia parentesi `[[]]`:

```{webr-r}
l.anon[[2]]
l.named[["B"]]
```


## Le tabelle

Le tabelle sono la struttura più usata in R e si creano con la funzione `data.frame()`. Noi utilizzeremo però la funzione `tibble()`: una versione più evoluta che fa parte della famiglia di librerie `tidyverse`:

```{webr-r}
#| warning = FALSE
# Prima carichiamo la libreria (una volta per sessione)
library(tidyverse)

t1 <- tibble(
  A = 1:5,
  B = A ^ 2
)
t1
```

Una tabella può essere indicizzata per riga e per colonna come una matrice, ma è possibile anche attingere alle colonne come vettori usando **il nome**:

```{webr-r}
t1$A
```

E, ovviamente, per ottenere i numeri la cui radice è dispari:

```{webr-r}
t1$B[t1$A %% 2 == 1]
```


# La libreria `tidyverse`

Si tratta di una libreria relativamente nuova che ha modificato radicalmente il modo di programmare in R, rendendolo più moderno ed efficiente. È in realtà una **meta-libreria** cioè un collezione di librerie, caricando la quale (comando `library()`) si caricano tutte le sotto librerie.

Si noti che le librerie devono anzitutto essere installate: o con il comando `install.packages("tidyverse")`, oppure da RStudio, pannello *Packages*, pulsante *Install.*

Una volta installata, una libreria può essere utilizzata o *caricandola* con `library(nome_della_lib_senza_virgolette)`, oppure scrivendo il nome della libreria e doppio due punti prima della funzione, ad es. `dplyr::filter()`.


## La gestione dei dati (*data mangling*)

La libreria `tidyverse` mette a disposizione tutto ciò che serve per maneggiare tabelle di dati in maniera molto completa, sintetica e efficiente.

Per rendere il codice più leggibile, anziché nidificare le chiamate ad una serie di funzioni si preferisce utilizzare l'operatore **pipe**, `%>%`, che passa il risultato di una funzione come primo argomento della successiva:

```{webr-r}
seq(0, pi, pi/3) %>% round(digits=2)
```

che equivale a scrivere:

```{webr-r}
round(seq(0, pi, pi/3), digits=2)
```

ma è più leggibile, soprattutto se si va a capo dopo ogni pipe, in modo che ad ogni riga corrisponda un passo dell'algoritmo. 


Le funzioni di *data mangling* più comuni sono:

* `mutate()`, per **modificare** o aggiungere una o più colonne
* `filter()`, per **filtrare** la tabella selezionando solo alcune righe
* `select()`, per **selezionare** solo alcune colonne
* `arrange()`, per **riordinare** le righe

Ad esempio:

```{webr-r}
tibble(
  A = 1:10,
  B = A ^ 2,
  C = rnorm(length(A))
) %>% 
  mutate(C = round(C, 3), D = LETTERS[A]) %>% 
  filter(A %% 2 == 0) %>% 
  select(D, B, C) %>% 
  arrange(desc(C))
```

Si noti che tutte queste funzioni sono **non distruttive**, cioè non alterano la tabella di partenza ma ne restituiscono una nuova. Se il risultato è utile per successive operazioni, quindi, è necessario salvarlo, ad esempio con:

```{webr-r}
tibble(
  A = 1:10,
  B = A ^ 2,
  C = rnorm(length(A))
) %>% 
  mutate(C = round(C, 3), D = LETTERS[A]) %>% 
  filter(A %% 2 == 0) %>% 
  select(D, B, C) -> t2
```

Le funzioni `group_by()` e `summarise()` servono per operare su **gruppi di righe**; ad esempio, per calcolare il massimo di `B` e la media di `C` per le righe in cui `A` è pari o dispari:

```{webr-r}
tibble(
  A = 1:10,
  B = A ^ 2,
  C = rnorm(length(A))
) %>% 
  mutate(even = A %% 2 == 0) %>% 
  group_by(even) %>%
  summarise(B = max(B), C = mean(C))
```


## I grafici

`tidyverse` ha messo a disposizione la libreria `ggplot2`, che consente di creare grafici **per layer**. Ogni layer rappresenta una geometria, ed è una funzione che comincia generalmente con `geom_`; i vari layer si sommano con un `+`. Il grafico comincia con `ggplot()`, che serve a caricare la tabella di dati e predisporre lo spazio del grafico stesso.

La funzione `aes()`infine rappresenta l'*estetica*, cioè stabilisce quali variabili (cioè colonne della tabella) vanno sui vari assi del grafico. Qui per *assi* si intendono sia gli assi cartesiani che gli assi generalizzati, cioè colori, dimensione, tipo linea, ecc. utilizzati per rappresentare le varie serie.

```{webr-r}
set.seed(0)
t <- tibble(
  A = 1:10,
  B = A ^ 2,
  C = rnorm(length(A))
) 

t %>% 
  ggplot(aes(x=A, y=B)) +
  geom_point(aes(color=C, size=C)) +
  geom_line()
```

Nel caso di più assi si passa l'estetica più generale a `ggplot()`, quelle particolari alle successive geometrie. In questo caso, solo per `geom_point()` si sono specificate le estetiche per coloer e dimensione del punto, entrambe collegate alla colonna `C`.

Si noti che nelle estetiche è possibile anche applicare trasformazioni:

```{webr-r}
t %>% 
  ggplot(aes(x=A)) +
  geom_point(aes(y=C*20+50)) +
  geom_line(aes(y=B))
```

Serie differenti possono essere identificate per colore (o per tipo linea, o per larghezza linea, ecc.):

```{webr-r}
t %>% 
  mutate(C = C * 20 + 50) %>% 
  ggplot(aes(x=A)) +
  geom_line(aes(y=C), color="red") +
  geom_line(aes(y=B), color="blue")
```

In questi casi però è preferibile usare l'**approccio *tidy* **: la tabella originale deve contenere una osservazione per riga, una variabile per colonna. La tabella `t` non è *tidy*, perché una stessa riga ha più di una osservazione (per `A`, `B` e `C`). 

Per rendere la tabella *tidy*:

```{webr-r}
t %>% 
  pivot_longer(-A, names_to = "series", values_to = "value")
```

dove `pivot_longer(-A, ...)` significa "riorganizza tutte le colonne **meno** la colonna `A`", dopodiché i nomi delle colonne vanno a finire nella colonna `series`, i valori nella colonna `value`.

Una tabella tidy è più semplice da mettere in grafico (e più efficiente da manipolare):

```{webr-r}
t %>% 
  mutate(C = C * 20 + 50) %>% 
  pivot_longer(-A, names_to = "series", values_to = "value") %>% 
  ggplot(aes(x=A, y=value, color=series)) +
  geom_line() +
  labs(x="Indice", y="Valore", color="Serie", title="Esempio tidy")
```

Come si vede, si ottiene gratuitamente la legenda. Più serie possono essere separate contemporaneamente per colore, tipo di linea, larghezza di linea, trasparenza, ecc.


# Map/reduce

In molti linguaggi moderni si sono diffusi gli algoritmi *map* e *reduce* come alternative efficienti (perché implementate a basso livello) dei loop espliciti. La prima realizza una **mappa**, cioè esegue la stessa operazione su tutti gli elementi di una collezione (tipicamente un vettore). La seconda **riduce** la dimensione di una collezione, ad esempio da un vettore a uno scalare, tipicamente accumulando gli elementi di una collezione.

In R, le operazioni analoghe sono fornite dal pacchetto `purrr`, parte di `tidyverse`.

## *Map*

le funzioni di `purrr` che cominciano con `map_*` operano su una lista o un vettore, ritornando una collezione di uguale dimensione e del tipo specificato. Ad esempio, `map_dbl()` restituisce una lista di double, `map_chr()` una lista di stringhe, ecc. Il primo argomento (spesso passato via pipe) è la collezione, il secondo è una funzione, eventualmente creata sul posto:

```{webr-r}
1:10 %>% 
  map_chr(function(x) LETTERS[x])
```

Per brevità si può scrivere anche:

```{webr-r}
1:10 %>% 
  map_chr(\(x) LETTERS[x])
```

e addirittura, sostituendo `\(x)` con `~` e `x` con `.`:

```{webr-r}
1:10 %>% map_chr(~ LETTERS[.])
```

Tutti questi esempi in realtà possono essere evitati scrivendo semplicemente `LETERS[1:10]`, ma le funzioni `map_*()` risultano indispensabili quando non esiste una equivalente funzione vettorializzata.

## *Reduce*

L'algoritmo *reduce* applica una mappa alla collezione e accumula ogni elemento in un accumulatore. In R si ottiene mediante la funzione `purrr::reduce()`:

```{webr-r}
1:4 %>% reduce(\(accu, elem) accu * elem)
```

Più in breve:

```{webr-r}
1:4 %>% reduce(~ .x * .y)
```

In questo caso, il valore iniziale dell'accumulatore è il primo elemento della collezione e il loop inizia a partire dal secondo. Quando invece l'accumulatore deve essere di un tipo differente dagli elementi, è necessario inizializzarlo con il parametro `.init`. È il caso, ad esempio, se voglio accumulare gli elementi in una lista:

```{webr-r}
0:4 %>% 
  reduce(
    \(accu, elem) {
      accu[[ letters[elem + 1] ]] <- 2^elem
      return(accu)
    },
    .init=list()
  )
```

in cui l'accumulatore è inizialmente una lista vuota (`list()`) alla quale aggiungo di volta in volta 2 elevato a ogni elemento del vettore iniziale (`1:4`), con il nome pari alla *i*-esima lettera minuscola (con offset 1, `letters[elem + 1]`). A differenza degli esempi precedenti, questo non è semplificabile con una funzione vettorializzata.


# File In/Out

Ci sono numerose funzioni per importare ed esportare dati su file, in differenti formati. Il metodo più semplice e comune è usando il formato CSV e le funzioni `read_csv()` e `write_csv()` (fornite da `tidyverse`).

Per salvare una tabella su un file:

```{webr-r}
tibble(
  A = 1:10,
  B = rnorm(length(A)),
  C = LETTERS[A]
) %>% write_csv(file="example.csv")
```

Se si usa il formato italiano/francese/spagnolo (celle separate da `;` e decimali separati da `,`), sostituire `write_csv()` con ` write_csv2()`.

Per leggere un file:

```{webr-r}
read_csv("example.csv")
```

Analogamente, usare `read_csv2()` per il formato delle lingue romanze.