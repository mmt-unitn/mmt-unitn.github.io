---
title: "4. Modulazione di ampiezza"
author: Mariolino De Cecco
date: today
categories: [signal, filter, spectrum]
format:
  html:
    toc: true
abstract: |
  Esercizi sulla modulazione di ampiezza delle misure mediante analisi dello spettro e filtraggio offline.
---

# Librerie

Quanto segue richiede questi pacchetti:

```{r setup}
#| message: false
#| warning: false
library(tidyverse)
library(plotly)
library(signal)
library(gsignal)
library(control)
library(latex2exp)
```

Se necessario installarli con `install.packages()` o mediante la GUI.

# Funzioni di utilità

Per comodità definiamo alcune funzioni di utilità:

Bode plot mediante GGplot:

```{r}
ggbodeplot <- function(tf, fmin=1, fmax=1e4, df=0.01) {
  # vector of points for each order of magnitude (OOM):
  pts <- 10^seq(0, 1, df) %>% tail(-1)
  # vector of OOMs:
  ooms <- 10^(floor(log10(fmin)):ceiling(log10(fmax)-1))
  # combine pts and ooms:
  freqs <- as.vector(pts %o% ooms)
  # warning: bode wants pulsation!
  bode(tf, freqs*2*pi) %>% {
    tibble(f=.$w/(2*pi), `magnitude (dB)`=.$mag, `phase (deg)`=.$phase)} %>%
    pivot_longer(-f) %>% 
    ggplot(aes(x=f, y=value)) +
    geom_line() +
    scale_x_log10(
      minor_breaks=scales::minor_breaks_n(10), 
      labels= ~ latex2exp::TeX(paste0("$10^{", log10(.), "}$"))) +
    facet_wrap(~name, nrow=2, scales="free") +
    labs(x="frequency (Hz)")
}
```

::: callout-warning
Forse la funzione `ggbodeplot` può essere rimossa da questo file?
:::

Generazione di un segnale sinusoidale con diverse armoniche, come definite in una tabella (`pars`) con le colonne `w` (ampiezza), `f` (frequenza) e `phi` (fase) per le varie frequenze (una riga per ogni armonica):

```{r}
signal <- function(t, pars, rad = FALSE) { 
  stopifnot(is.data.frame(pars))
  with(pars, {
    if (!rad) {
      phi <- phi/180*pi
      f <- 2*pi*f
    }
    map_dbl(t, \(t) sum( map_vec(seq_along(w) , \(i) w[i]*sin(t*f[i] + phi[i] ))))
  })
}
```

# Simulazione del segnale

Costruiamo l'uscita di uno strumento di misura, la sua modulazione in ampiezza, il rumore interferente e grafichiamo gli spettri.

::: {.callout-note title="Una nota su `plotly`"}
Nel corso di statistica viene spiegato l'uso di GGPlot2. Quest'ultimo è studiato per l'efficacia e chiarezza di presentazione, per le quali è superiore a plotly.

È comunque possibile rendere i grafici GGPlot2 interattivi, passandoli alla funzione `ggplotly()`.

Si noti tuttavia che avere molti grafici interattivi (e con molti punti) rallenta parecchio il caricamento della pagina nel browser: meglio evitarlo per i grafici "intermedi" e riservarlo ai grafici finali.
:::

Definiamo alcuni parametri generici e la tabella delle armoniche:

```{r}
# Parametri
fc <- 2000        # Frequenza di campionamento (Hz)
fm <- 10          # Frequenza del segnale di misura (Hz)
fr <- 15          # Frequenza del rumore (Hz)
fp <- 300         # Frequenza della portante (Hz)
m <- 0.8          # Indice di modulazione (0 < m < 1)
duration <- 10    # Durata del segnale (secondi)

# tabella delle armoniche del segnale di misura
pars_m <- tibble(
  w = c(1, 0.5, 0.3), 
  f = c(fm, 2*fm, 4*fm), 
  phi = c(0, 0, 0)
)

pars_m %>% knitr::kable()
```

Generiamo il segnale di misura, perturbato da un rumore normale:

```{r}
ym <- tibble(
  t = seq(0, duration, by = 1/fc),
  y = signal(t, pars_m),
  yn = y + rnorm(length(t), 0, pars_m$w[1]/10)
) %>% 
  mutate(
    f = 0:(length(t)-1)/max(t),
    fft = fft(yn),
    intensity = Mod(fft) / length(t)*2,
    phase = Arg(fft)/pi*180
  ) 

ym %>%  
  ggplot(aes(x=f, y=intensity)) +
  geom_line()
```

Generiamo il rumore interferente con il suo spettro. Parametri delle armoniche corrispondenti al rumore interferente:

```{r}
pars_r <- tibble(
  w = c(1, 0.5, 0.8), 
  f = c(fr, 3*fr, 9*fr), 
  phi = c(0, 40, 90)
)
pars_r %>% knitr::kable()
```

Aggiungo il rumore alla tabella `ym`:

```{r}
ym <- ym %>% 
  mutate(
    i_noise = signal(t, pars_r),
    fft_n = fft(i_noise)
  )
```

Ottengo il grafico dello spettro:

```{r}
ym %>% 
  select(t, yn, f, fft_s=fft, fft_n) %>% 
  pivot_longer(
    contains("fft"), 
    names_to = "signal",
    values_to = "fft",
    names_transform = ~ ifelse(.=="fft_s", "signal", "intf. noise")
  ) %>% 
  mutate(
    intensity = Mod(fft) / length(t)*2,
    phase = Arg(fft)/pi*180
  ) %>% 
  ggplot(aes(x=f, y=intensity, color=signal)) +
  geom_line()
```

::: {.callout-note title="Tidy data"}
Cerchiamo più possibile di utilizzare dati *tidy*, cioè una variabile per colonna, un'osservazione per riga. In questo modo realizzare grafici con serie multiple è particolarmente rapido (basta identificare la variabile di classificazione, cioè il nome della colonna che contiene la chiave di raggruppamento).

Per questo motivio, qui e di seguito useremo `pivot_longer`.
:::

Aggiungo anche la modulazione:

```{r}
# Aggiungo una mappa da nomi delle colonne -> nomi in legenda
fft_names=c(
  "fft" = "signal", 
  "fft_n" = "intf. noise", 
  "fft_m" = "modulation"
)

# Aggiungo la modulazione
ym <- ym %>% 
  mutate(
    yn_m = (1 + m * ym$yn) * cos(2 * pi * fp * t),
    fft_m = fft(yn_m)
  ) 

# Grafico dello spettro
(ym %>% 
  select(t, yn, i_noise, yn_m, f, contains("fft")) %>% 
  pivot_longer(
    contains("fft"), 
    names_to = "signal",
    values_to = "fft",
    names_transform = ~ fft_names[.]
  ) %>% 
  mutate(
    intensity = Mod(fft) / length(t)*2,
    phase = Arg(fft)/pi*180
  ) %>% 
  ggplot(aes(x=f, y=intensity, color=signal)) +
  geom_line() +
  xlim(c(0, 500))) %>% 
  ggplotly()
```

# Effetto interferente sul segnale modulato

Adesso che abbiamo il segnale modulato separato in frequenza dal rumore possiamo 'esporlo' al rumore interferente.

Osserviamo prima la modulazione:

```{r}
ym %>% 
  ggplot(aes(x=t, y=yn_m)) + 
  geom_line()
```

Combiniamo segnale e modulazione:

```{r}
#| warning: false
ym <- ym %>% 
  mutate(
    yn_m_n = yn_m + i_noise,
    fft_m_n = fft(yn_m_n)
  )
```

Ora `ym` è così composta:

```{r}
ym %>% head() %>% knitr::kable()
```



```{r}
#| warning: false
ym %>% 
  select(t, yn_m, yn_m_n) %>% 
  pivot_longer(!t, names_to = "series", values_to = "value") %>% 
  ggplot(aes(x=t, y=value, color=series)) +
  geom_line() +
  facet_wrap(~series, nrow=2) +
  xlim(c(0, 0.5))
```

Osserviamo lo spettro:

```{r}
#| warning: false
fft_names["fft_m_n"] <- "signal_modulated"
ym %>%
  select(t, yn, i_noise, yn_m, f, contains("fft")) %>% 
  pivot_longer(
    contains("fft"), 
    names_to = "signal",
    values_to = "fft",
    names_transform = ~ fft_names[.]
  ) %>% 
  mutate(
    intensity = Mod(fft) / length(t)*2,
    phase = Arg(fft)/pi*180
  ) %>% 
  ggplot(aes(x=f, y=intensity, color=signal)) +
  geom_line() +
  xlim(c(0,500))
```

::: {.callout-note title="Esercizio"}
Estrarre il segnale in uscita originale a partire da quello affetto da rumore bianco, modulato ed affetto da rumore interfente ovvero da `ym$yn_m_n`
:::

# OMETTERE E FAR FARE COME ESERCIZIO

Passo 1: Filtraggio e Demodulazione

Estraiamo il segnale modulato mediante un filtro passa-alto. Di conseguenza è rimasto solo il segnale modulato che va quindi demodulato per ottenere una stima del segnale in uscita originario

```{r}
cutoff <- 2 * max(pars_r$f) / fc  # Frequenza di taglio (2 volte la massima frequenza del rumore)
bf <- butter(4, cutoff, type = "high")
ym <- ym %>% 
  mutate(
    yn_m_f = filtfilt(bf, yn_m_n) # filtfilt non introduce ritardo
  )
```

Passo 2: Demodulazione

Moltiplicazione per la portante:

```{r}
ym <- ym %>% 
  mutate(
    demod_raw = 2 * yn_m_f * cos(2 * pi * fp * t) - 1
  )
```

Passo 3: Filtraggio Passa-Basso con filtro Butterworth

```{r}
cutoff <- 2 * max(pars_m$f) / fc  # Frequenza di taglio (2 volte la massima frequenza del segnale informativo)
bf <- butter(4, cutoff, type = "low")
ym <- ym %>% 
  mutate(
    demod = filtfilt(bf, demod_raw)
  )
```

Confronto dei segnali:

```{r}
(ym %>% 
  mutate(y_noisy = yn + i_noise) %>% 
  select(t, y, y_noisy, demod) %>% 
  pivot_longer(-t) %>% 
  ggplot(aes(x=t, y=value, color=name)) + 
  geom_line() +
  coord_cartesian(xlim=c(0, 0.5))) %>% 
  ggplotly()
```

Si noti come il segnale originario fosse affetto da rumore bianco, poi modulato e quindi sovrapposto ad un effetto interferente a tre armoniche. Alla fine del processo abbiamo ottenuto il segnale molto simile al segnale originario con una riduzione vistosa anche del rumore interferente
