---
title: "4. Modulazione di ampiezza"
author: Mariolino De Cecco
date: today
categories: [signal, filter, spectrum]
format:
  html:
    toc: true
abstract: |
  Esercizi sulla modulazione di ampiezza delle misure mediante analisi dello spettro e filtraggio offline.
---

# Librerie

Quanto segue richiede questi pacchetti:

```{r setup}
#| message: false
#| warning: false
library(tidyverse)
library(plotly)
library(gsignal)
```

Se necessario installarli con `install.packages()` o mediante la GUI.

# Funzioni di utilità

Per comodità definiamo alcune funzioni di utilità.

Generazione di un segnale sinusoidale con diverse armoniche, come definite in una tabella (`pars`) con le colonne `w` (ampiezza), `f` (frequenza) e `phi` (fase) per le varie frequenze (una riga per ogni armonica):

```{r}
signal <- function(t, pars, rad = FALSE) { 
  stopifnot(is.data.frame(pars))
  with(pars, {
    if (!rad) {
      phi <- phi/180*pi
      f <- 2*pi*f
    }
    map_dbl(t, \(t) sum( map_vec(seq_along(w) , \(i) w[i]*sin(t*f[i] + phi[i] ))))
  })
}
```

# Simulazione del segnale

Costruiamo l'uscita di uno strumento di misura, la sua modulazione in ampiezza, il rumore interferente e grafichiamo gli spettri.

::: {.callout-tip title="Una nota su `plotly`"}
Nel corso di statistica viene spiegato l'uso di GGPlot2. Quest'ultimo è studiato per l'efficacia e chiarezza di presentazione, per le quali è superiore a plotly.

È comunque possibile rendere i grafici GGPlot2 interattivi, passandoli alla funzione `ggplotly()`.

Si noti tuttavia che avere molti grafici interattivi (e con molti punti) rallenta parecchio il caricamento della pagina nel browser: meglio evitarlo per i grafici "intermedi" e riservarlo ai grafici finali.
:::

Definiamo alcuni parametri generici e la tabella delle armoniche:

```{r}
# Parametri
fc <- 2000        # Frequenza di campionamento (Hz)
fm <- 10          # Frequenza del segnale di misura (Hz)
fr <- 15          # Frequenza del rumore (Hz)
fp <- 300         # Frequenza della portante (Hz)
m <- 0.8          # Indice di modulazione (0 < m < 1)
duration <- 10    # Durata del segnale (secondi)

# tabella delle armoniche del segnale di misura
pars_m <- tibble(
  w = c(1, 0.5, 0.3), 
  f = c(fm, 2*fm, 4*fm), 
  phi = c(0, 0, 0)
)

pars_m %>% knitr::kable()
```

Generiamo il segnale di misura, perturbato da un rumore normale:

```{r}
ym <- tibble(
  t = seq(0, duration, by = 1/fc),
  y = signal(t, pars_m),
  yn = y + rnorm(length(t), 0, pars_m$w[1]/10)
) %>% 
  mutate(
    f = 0:(length(t)-1)/max(t),
    fft = fft(y)
  ) 

ym %>%  
  mutate(intensity = Mod(fft) / length(t)*2,) %>% 
  ggplot(aes(x=f, y=intensity)) +
  geom_line()
```

Generiamo il rumore interferente con il suo spettro. Parametri delle armoniche corrispondenti al rumore interferente:

```{r}
pars_r <- tibble(
  w = c(1, 0.5, 0.8), 
  f = c(fr, 3*fr, 9*fr), 
  phi = c(0, 40, 90)
)
pars_r %>% knitr::kable()
```

Aggiungo il rumore interferente alla tabella `ym`:

```{r}
ym <- ym %>% 
  mutate(
    y_in = signal(t, pars_r),
    fft_in = fft(y_in)
  )
```

Ottengo il grafico dello spettro:

```{r}
ym %>% 
  select(f, fft, fft_in) %>% 
  pivot_longer(
    contains("fft"), 
    names_to = "signal",
    values_to = "fft",
    names_transform = ~ ifelse(.=="fft", "signal", "intf. noise")
  ) %>% 
  mutate(
    intensity = Mod(fft) / length(t)*2
  ) %>% 
  ggplot(aes(x=f, y=intensity, color=signal)) +
  geom_line()
```

::: {.callout-tip title="Tidy data"}
Cerchiamo più possibile di utilizzare dati *tidy*, cioè una variabile per colonna, un'osservazione per riga. In questo modo realizzare grafici con serie multiple è particolarmente rapido (basta identificare la variabile di classificazione, cioè il nome della colonna che contiene la chiave di raggruppamento).

Per questo motivio, qui e di seguito useremo `pivot_longer`.
:::

Aggiungo anche la modulazione:

```{r}
# Aggiungo una mappa da nomi delle colonne -> nomi in legenda
fft_names=c(
  "fft" = "signal", 
  "fft_in" = "intf. noise", 
  "fft_m" = "modulation"
)

# Aggiungo la modulazione
ym <- ym %>% 
  mutate(
    y_m = (1 + m * yn) * cos(2 * pi * fp * t),
    fft_m = fft(y_m)
  )
```




```{r}
# Grafico dello spettro
(ym %>% 
  select(f, contains("fft")) %>% 
  pivot_longer(
    -f, 
    names_to = "signal",
    values_to = "fft",
    names_transform = ~ fft_names[.]
  ) %>%
  mutate(
    intensity = Mod(fft) / length(t)*2
  ) %>% 
  ggplot(aes(x=f, y=intensity, color=signal)) +
  geom_line() +
  xlim(c(0, 500))) %>% 
  ggplotly()
```

:::{.callout-tip title="Alternativa SENZA `pivot_longer`"}
Ridotto all'osso, l'ultimo grafico è (evito `ggplotly` per brevità):

```{r}
#| warning: false
ym %>% 
  select(f, contains("fft")) %>% 
  pivot_longer(-f) %>%
  mutate(
    intensity = Mod(value) / length(t)*2
  ) %>% 
  ggplot(aes(x=f, y=intensity, color=name)) +
  geom_line()
```

Se non voglio usare `pivot_longer()` devo aggiungere tre colonne, una alla volta (stando attento a ripetere la formula correttamente: se scrivessi `fft_m = Mod(fft_n) / length(t) * 2` otterrei un errore molto difficile da individuare!), con il modulo della FFT e nel plot devo aggiungere un layer alla volta (stando asttento a specificare correttamente il nome della serie come variabile `color`):

```{r}
#| warning: false
ym %>% 
  select(f, contains("fft")) %>% 
  mutate(
    fft = Mod(fft) / length(t) * 2,
    fft_in = Mod(fft_in) / length(t) * 2,
    fft_m = Mod(fft_m) / length(t) * 2
  ) %>% 
  ggplot(aes(x=f)) + 
  geom_line(aes(y=fft, color="fft")) +
  geom_line(aes(y=fft_in, color="fft_in")) +
  geom_line(aes(y=fft_m, color="fft_m"))
```

:::


# Effetto interferente sul segnale modulato

Adesso che abbiamo il segnale modulato separato in frequenza dal rumore possiamo 'esporlo' al rumore interferente.

Osserviamo prima la modulazione:

```{r}
ym %>% 
  ggplot(aes(x=t, y=y_m)) + 
  geom_line()
```

Combiniamo segnale e modulazione:

```{r}
#| warning: false
ym <- ym %>% 
  mutate(
    y_m_in = y_m + y_in,
    fft_m_in = fft(y_m_in)
  )
```

Ora `ym` è così composta:

```{r}
ym %>% head() %>% knitr::kable()
```



```{r}
#| warning: false
ym %>% 
  select(t, y_m, y_m_in) %>% 
  pivot_longer(-t, names_to = "series", values_to = "value") %>% 
  ggplot(aes(x=t, y=value, color=series)) +
  geom_line() +
  facet_wrap(~series, nrow=2) +
  xlim(c(0, 0.5))
```

Osserviamo lo spettro:

```{r}
#| warning: false
fft_names["fft_m_in"] <- "mod. + intf."
ym %>%
  select(f, contains("fft")) %>% 
  pivot_longer(
    -f, 
    names_to = "signal",
    values_to = "fft",
    names_transform = ~ fft_names[.]
  ) %>% 
  mutate(
    intensity = Mod(fft) / length(t)*2
  ) %>% 
  ggplot(aes(x=f, y=intensity, color=signal)) +
  geom_line() +
  xlim(c(0,500))
```

::: {.callout-note title="Esercizio"}
Estrarre il segnale in uscita originale a partire da quello affetto da rumore bianco, modulato ed affetto da rumore interfente ovvero da `ym$y_m_in`
:::

## In un colpo solo

Nella parte precedente, la tabella `ym` è stata costruita gradualmente, allo scopo di illustrare la composizione del segnale simulato. Guardando le operazioni nel loro complesso, la procedura è in realtà più semplice:

```{r}
#| warning: false

tibble(
  t = seq(0, duration, by = 1/fc),
  y = signal(t, pars_m) + 
      rnorm(length(t), 0, pars_m$w[1]/10),    # segnale 
  fft = fft(y),                               # e sua FFT
  y_in = signal(t, pars_r),                   # rumore interferente
  fft_in = fft(y_in),                         # e sua FFT
  y_m = (1 + m * y) * cos(2 * pi * fp * t),   # modulante
  fft_m = fft(y_m),                           # e sua FFT
  y_m_in = y_m + y_in,                        # modulante + interferente
  fft_m_in = fft(y_m_in)                      # e sua FFT
) %>%
  # aggiungo la frequenza
  mutate(
    f = 0:(length(t)-1)/max(t),
  ) %>% 
  # prendo solo le colonne frequenza e fft
  select(f, contains("fft")) %>% 
  # riorganizzo la tabella
  pivot_longer(
    -f, 
    names_to = "signal",
    values_to = "fft",
    names_transform = ~ fft_names[.]
  ) %>% 
  # aggiungo l'intensità
  mutate(
    intensity = Mod(fft) / length(t)*2
  ) %>% 
  ggplot(aes(x=f, y=intensity, color=signal)) +
  geom_line() +
  xlim(c(0,500))
```




:::{.callout-note title="Esercitazione"}

### Riconoscimento punti esame {.unnumbered}

Il completamento di questo esercizio comporta il riconoscmiento di ±0.5 punti.

### Assegnazioni {.unnumbered}


### Suggerimenti {.unnumbered}


:::
